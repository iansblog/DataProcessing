services:
  nodered:
    container_name: nodered
    image: nodered/node-red
    ports:
      - "1880:1880"
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\nodered_data:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\rabbitmq_data:/var/lib/rabbitmq

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\grafana_data:/var/lib/grafana

  postgres:
    container_name: postgres
    image: postgres    
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      HASURA_DB_USER: ${HASURA_DB_USER}
      HASURA_DB_PASSWORD: ${HASURA_DB_PASSWORD}
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\postgres_data:/var/lib/postgresql/data
      - ./configuration/postgresql_config.sql:/docker-entrypoint-initdb.d/init-database.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  hasura:
    container_name: hasura
    image: hasura/graphql-engine
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${HASURA_DB_USER}:${HASURA_DB_PASSWORD}@postgres:5432/${HASURA_DB}
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${HASURA_DB_USER}:${HASURA_DB_PASSWORD}@postgres:5432/${HASURA_METADATA_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\hasura_data:/var/lib/hasura

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_SERVER_NAME: ${PGADMIN_SERVER_NAME}
      PGADMIN_SERVER_HOST: ${PGADMIN_SERVER_HOST}
      PGADMIN_SERVER_PORT: ${PGADMIN_SERVER_PORT}
      PGADMIN_SERVER_USER: ${PGADMIN_SERVER_USER}
      PGADMIN_SERVER_PASSWORD: ${PGADMIN_SERVER_PASSWORD}
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\pgadmin_data:/var/lib/pgadmin

  python_app:
    container_name: python_app
    build:
      context: ./python_app  # Path to your Python app directory
    ports:
      - "5000:5000"  # Adjust port as needed
    networks:
      - network_data
    volumes:
      - C:\dataprocessing\python_app:/python_app  # Mount your Python app directory

networks:
  network_data: